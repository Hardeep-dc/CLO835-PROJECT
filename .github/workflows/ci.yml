name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Confgure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest

      - name: Create a simple test file
        run: |
          mkdir -p tests
          echo "def test_placeholder():\n    assert 1 == 1" > tests/test_placeholder.py
          cat tests/test_placeholder.py

      - name: Run unit tests
        run: |
          pytest tests

      - name: Build, tag, and push MySQL image to Amazon ECR
        if: success()
        env:
          ECR_REGISTRY: 104387388648.dkr.ecr.us-east-1.amazonaws.com
          MYSQL_REPOSITORY: mysql-repo
          MYSQL_IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$MYSQL_REPOSITORY:$MYSQL_IMAGE_TAG -f Dockerfile_mysql .
          docker push $ECR_REGISTRY/$MYSQL_REPOSITORY:$MYSQL_IMAGE_TAG

      - name: Build, tag, and push Flask image to Amazon ECR
        if: success()
        env:
          ECR_REGISTRY: 104387388648.dkr.ecr.us-east-1.amazonaws.com
          FLASK_REPOSITORY: my-app
          FLASK_IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$FLASK_REPOSITORY:$FLASK_IMAGE_TAG .
          docker push $ECR_REGISTRY/$FLASK_REPOSITORY:$FLASK_IMAGE_TAG

      - name: Run MySQL container
        if: success()
        run: |
          docker run -d --name mysql-container -e MYSQL_ROOT_PASSWORD=root -e MYSQL_DATABASE=employees -e MYSQL_USER=user -e MYSQL_PASSWORD=user_password ${{ env.ECR_REGISTRY }}/${{ env.MYSQL_REPOSITORY }}:${{ env.MYSQL_IMAGE_TAG }}

      - name: Wait for MySQL to be ready
        if: success()
        run: |
          until docker exec mysql-container mysqladmin --user=root --password=root --host "127.0.0.1" ping --silent &> /dev/null ; do
            echo 'waiting for mysql...'
            sleep 2
          done

      - name: Stop MySQL container
        if: success()
        run: |
          docker stop mysql-container
          docker rm mysql-container

